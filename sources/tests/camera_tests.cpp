#include "gtest/gtest.h"
#include "omg/cameras/OrthoCamera.h"
#include "omg/cameras/PerspectiveCamera.h"

namespace {


    TEST(Camera, OrthoBasis) {

        omg::OrthoCamera camera {
           200,
           100,
           {0.0, 0.0, 0.0},
           {0.0, 0.0, -1.0},
           {0.0, 1.0, 0.0},
           {-1.0, 1.0, 1.0, -1.0}
        };

        auto [u, v, w] = camera.get_ortho_basis();

        ASSERT_TRUE(w == (omg::Vec3{0.0, 0.0, 1.0}));
        ASSERT_TRUE(v == (omg::Vec3{0.0, 1.0, 0.0}));
        ASSERT_TRUE(u == (omg::Vec3{1.0, 0.0, 0.0}));
    }

    TEST(Camera, OrthoCamera) {
        omg::OrthoCamera camera {
            40,
            30,
            {0.0, 0.0, 0.0},
            {0.0, 0.0, -10.0},
            {0.0, 1.0, 1.0},
            {-3.0, 3.0, -2.25, 2.25}
        }; 
        
        std::map<std::pair<int, int>, omg::Ray> gtruth = 
        {
            {{29,  0},{{-2.925,-2.175,0},{0,0,-1}}},
            {{29,  1},{{-2.775,-2.175,0},{0,0,-1}}},
            {{29,  2},{{-2.625,-2.175,0},{0,0,-1}}},
            {{29,  3},{{-2.475,-2.175,0},{0,0,-1}}},
            {{29,  4},{{-2.325,-2.175,0},{0,0,-1}}},
            {{29,  5},{{-2.175,-2.175,0},{0,0,-1}}},
            {{29,  6},{{-2.025,-2.175,0},{0,0,-1}}},
            {{29,  7},{{-1.875,-2.175,0},{0,0,-1}}},
            {{29,  8},{{-1.725,-2.175,0},{0,0,-1}}},
            {{29,  9},{{-1.575,-2.175,0},{0,0,-1}}},
            {{29, 10},{{-1.425,-2.175,0},{0,0,-1}}},
            {{29, 11},{{-1.275,-2.175,0},{0,0,-1}}},
            {{29, 12},{{-1.125,-2.175,0},{0,0,-1}}},
            {{29, 13},{{-0.975,-2.175,0},{0,0,-1}}},
            {{29, 14},{{-0.825,-2.175,0},{0,0,-1}}},
            {{29, 15},{{-0.675,-2.175,0},{0,0,-1}}},
            {{29, 16},{{-0.525,-2.175,0},{0,0,-1}}},
            {{29, 17},{{-0.375,-2.175,0},{0,0,-1}}},
            {{29, 18},{{-0.225,-2.175,0},{0,0,-1}}},
            {{29, 19},{{-0.075,-2.175,0},{0,0,-1}}},
            {{29, 20},{{0.075,-2.175,0}, {0,0,-1}}},
            {{29, 21},{{0.225,-2.175,0}, {0,0,-1}}},
            {{29, 22},{{0.375,-2.175,0}, {0,0,-1}}},
            {{29, 23},{{0.525,-2.175,0}, {0,0,-1}}},
            {{29, 24},{{0.675,-2.175,0}, {0,0,-1}}},
            {{29, 25},{{0.825,-2.175,0}, {0,0,-1}}},
            {{29, 26},{{0.975,-2.175,0}, {0,0,-1}}},
            {{29, 27},{{1.125,-2.175,0}, {0,0,-1}}},
            {{29, 28},{{1.275,-2.175,0}, {0,0,-1}}},
            {{29, 29},{{1.425,-2.175,0}, {0,0,-1}}},
            {{29, 30},{{1.575,-2.175,0}, {0,0,-1}}},
            {{29, 31},{{1.725,-2.175,0}, {0,0,-1}}},
        };

        for (int i = 0; i < 32; ++i) {
            omg::Ray r = camera.generate_ray(i/40.0, 0.0/30.0);
            auto o = r.get_origin(); 
            auto p = std::pair{29, i};
            ASSERT_TRUE(o == (gtruth.find(p)->second.get_origin()));
        }
    }

    TEST(Camera, PerspCamera) {
        omg::PerspectiveCamera camera {
            40,
            30,
            {0.0, 0.0, 0.0},
            {0.0, 0.0, -10.0},
            {0.0, 1.0, 1.0},
            1.0,
            90.0
        };

        std::map<std::pair<int, int>, omg::Ray> gtruth =
        {
            {{29,  0},{{0,0,0}, {-0.447138,-0.332487,-0.830374}}},
            {{29,  1},{{0,0,0}, {-0.42851,-0.335859,-0.838796}}},
            {{29,  2},{{0,0,0}, {-0.409319,-0.33915,-0.847015}}},
            {{29,  3},{{0,0,0}, {-0.38957,-0.342349,-0.855004}}},
            {{29,  4},{{0,0,0}, {-0.369268,-0.345444,-0.862734}}},
            {{29,  5},{{0,0,0}, {-0.348423,-0.348423,-0.870174}}},
            {{29,  6},{{0,0,0}, {-0.327049,-0.351274,-0.877294}}},
            {{29,  7},{{0,0,0}, {-0.30516,-0.353986,-0.884065}}},
            {{29,  8},{{0,0,0}, {-0.282777,-0.356545,-0.890457}}},
            {{29,  9},{{0,0,0}, {-0.259922,-0.35894,-0.896439}}},
            {{29, 10},{{0,0,0}, {-0.236622,-0.36116,-0.901983}}},
            {{29, 11},{{0,0,0}, {-0.212907,-0.363193,-0.907062}}},
            {{29, 12},{{0,0,0}, {-0.188809,-0.36503,-0.911649}}},
            {{29, 13},{{0,0,0}, {-0.164365,-0.36666,-0.915721}}},
            {{29, 14},{{0,0,0}, {-0.139615,-0.368075,-0.919254}}},
            {{29, 15},{{0,0,0}, {-0.1146,-0.369267,-0.92223}}},
            {{29, 16},{{0,0,0}, {-0.0893656,-0.370229,-0.924632}}},
            {{29, 17},{{0,0,0}, {-0.0639577,-0.370955,-0.926446}}},
            {{29, 18},{{0,0,0}, {-0.038425,-0.371441,-0.927661}}},
            {{29, 19},{{0,0,0}, {-0.0128167,-0.371685,-0.92827}}},
            {{29, 20},{{0,0,0}, {0.0128167,-0.371685,-0.92827}}},
            {{29, 21},{{0,0,0}, {0.038425,-0.371441,-0.927661}}},
            {{29, 22},{{0,0,0}, {0.0639577,-0.370955,-0.926446}}},
            {{29, 23},{{0,0,0}, {0.0893655,-0.370229,-0.924632}}},
            {{29, 24},{{0,0,0}, {0.1146,-0.369267,-0.92223}}},
            {{29, 25},{{0,0,0}, {0.139615,-0.368075,-0.919254}}},
            {{29, 26},{{0,0,0}, {0.164365,-0.36666,-0.915721}}},
            {{29, 27},{{0,0,0}, {0.188809,-0.36503,-0.911649}}},
            {{29, 28},{{0,0,0}, {0.212907,-0.363193,-0.907062}}},
            {{29, 29},{{0,0,0}, {0.236622,-0.36116,-0.901983}}},
            {{29, 30},{{0,0,0}, {0.259922,-0.35894,-0.896439}}},
            {{29, 31},{{0,0,0}, {0.282777,-0.356545,-0.890457}}},
        };
    
        for (int i = 0; i < 32; ++i) {
            omg::Ray r = camera.generate_ray(i/40.0, 0.0/30.0);
            auto d = r.get_direction(); 
            auto p = std::pair{29, i};
            std::cout << d(0) << " " << d(1) << " " << d(2) << std::endl;
            ASSERT_TRUE(d == (gtruth.find(p)->second.get_direction()));
        }
    }

};
